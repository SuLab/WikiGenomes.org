.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Data::Grove::Visitor 3"
.TH Data::Grove::Visitor 3 "2003-10-21" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Grove::Visitor \- add visitor/callback methods to Data::Grove objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Data::Grove::Visitor;
\&
\& @results = $object\->accept ($visitor, ...);
\& @results = $object\->accept_name ($visitor, ...);
\& @results = $object\->children_accept ($visitor, ...);
\& @results = $object\->children_accept_name ($visitor, ...);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Data::Grove::Visitor adds visitor methods (callbacks) to Data::Grove
objects.  A ``visitor'' is a class (a package) you write that has
methods (subs) corresponding to the objects in the classes being
visited.  You use the visitor methods by creating an instance of your
visitor class, and then calling `\f(CW\*(C`accept($my_visitor)\*(C'\fR' on the
top-most object you want to visit, that object will in turn call your
visitor back with `\f(CW\*(C`visit_\f(CIOBJECT\f(CW\*(C'\fR', where \fI\s-1OBJECT\s0\fR is the type of
object.
.PP
There are several forms of `\f(CW\*(C`accept\*(C'\fR'.  Simply calling `\f(CW\*(C`accept\*(C'\fR'
calls your package back using the object type of the object you are
visiting.  Calling `\f(CW\*(C`accept_name\*(C'\fR' on an element object calls you
back with `\f(CW\*(C`visit_name_\f(CINAME\f(CW\*(C'\fR' where \fI\s-1NAME\s0\fR is the tag name of the
element, on all other objects it's as if you called `\f(CW\*(C`accept\*(C'\fR'.
.PP
All of the forms of `\f(CW\*(C`accept\*(C'\fR' return a concatenated list of the
result of all `\f(CW\*(C`visit\*(C'\fR' methods.
.PP
`\f(CW\*(C`children_accept\*(C'\fR' calls `\f(CW\*(C`accept\*(C'\fR' on each of the children of the
element.  This is generally used in element callbacks to recurse down
into the element's children, you don't need to get the element's
contents and call `\f(CW\*(C`accept\*(C'\fR' on each item.  `\f(CW\*(C`children_accept_name\*(C'\fR'
does the same but calling `\f(CW\*(C`accept_name\*(C'\fR' on each of the children.
`\f(CW\*(C`attr_accept\*(C'\fR' calls `\f(CW\*(C`accept\*(C'\fR' on each of the objects in the named
attribute.
.PP
Refer to the documentation of the classes you are visiting
(XML::Grove, etc.) for the type names (`\f(CW\*(C`element\*(C'\fR', `\f(CW\*(C`document\*(C'\fR',
etc.) of the objects it implements.
.SH "RESERVED NAMES"
.IX Header "RESERVED NAMES"
The hash keys `\f(CW\*(C`Contents\*(C'\fR' and `\f(CW\*(C`Name\*(C'\fR' are used to indicate objects
with children (for `\f(CW\*(C`children_accept\*(C'\fR') and named objects (for
`\f(CW\*(C`accept_name\*(C'\fR').
.SH "NOTES"
.IX Header "NOTES"
These are random ideas that haven't been implemented yet:
.IP "\(bu" 4
Several objects fall into subclasses, or you may want to be able to
subclass a visited object and still be able to tell the difference.
In SGML::Grove I had used the package name in the callback
(`\f(CW\*(C`visit_SGML_Element\*(C'\fR') instead of a generic name
(`\f(CW\*(C`visit_element\*(C'\fR').  The idea here would be to try calling
`\f(CW\*(C`visit_\f(CIPACKAGE\f(CW\*(C'\fR' with the most specific class first, then try
superclasses, and lastly to try the generic.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken MacLeod, ken@bitsko.slc.ut.us
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), Data::Grove
.PP
Extensible Markup Language (\s-1XML\s0) <http://www.w3c.org/XML>
